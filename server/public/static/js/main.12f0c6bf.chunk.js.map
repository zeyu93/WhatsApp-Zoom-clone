{"version":3,"sources":["components/Login.js","hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/Message.js","components/MessageList.js","contexts/VideoProvider.js","components/UserInfo.js","components/Video.js","components/Chat.js","components/Conversations.js","components/ConversationsModal.js","components/ContactsModal.js","components/Contacts.js","components/Sidebar.js","components/Dashboard.js","components/App.js","index.js"],"names":["Login","setId","setName","nameRef","useRef","generateNewID","newID","uuidv4","Container","className","style","height","Accordion","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","Form","onSubmit","e","preventDefault","current","value","Group","Label","Control","type","ref","required","onClick","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","useSocket","SocketProvider","socket","setSocket","console","log","process","REACT_APP_DEV_URL","newSocket","io","query","close","ConversationContext","useConversation","ConversationsProvider","conversations","setConversations","selectedConvoIndex","setSelectedConvoIndex","formattedConversations","map","convo","index","chatMembers","ids","person","find","contact","messages","message","sender","fromMe","senderName","selected","addMessageToConversation","useCallback","text","newMessage","prevConvos","madeChange","newConversations","isArrayEqual","on","off","createConversation","prevConversations","existingConvoIndex","some","selectConversationIndex","selectedConversation","sendMessage","member","emit","array1","array2","length","sort","every","element","Message","isLastMessage","setRef","node","scrollIntoView","smooth","MessageList","VideoContext","VideoProvider","userVideo","partnerVideo","stream","setStream","callAccepted","setCallAccepted","receivingCall","setReceivingCall","callerSignal","setCallerSignal","caller","setCaller","navigator","mediaDevices","getUserMedia","video","audio","then","srcObject","data","from","signal","copy","mediaStream","tracks","getTracks","forEach","track","stop","callOtherUsersInChat","peer","Peer","initiator","trickle","usersToCall","signalData","acceptCall","to","endCall","UserInfo","setVideoStart","videoStart","Alert","Badge","marginLeft","Video","playsInline","muted","autoPlay","width","Chat","setText","InputGroup","onChange","target","resize","Append","Conversations","ListGroup","varaiant","Item","action","active","array","join","ConversationsModal","closeModal","selectedContactIds","setSelectedContactIds","Modal","closeButton","controlId","Check","includes","label","filter","prevId","ContactsModal","idRef","Contacts","CONTACTS_KEY","CONVERSATIONS_KEY","Sidebar","activeKey","setActiveKey","showModal","setShowModal","conversationOpen","Tab","onSelect","Nav","Link","Content","Pane","show","onHide","Dashboard","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12f0c6bf.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Button, Container, Form, Accordion, Card } from \"react-bootstrap\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function Login({ setId, setName }) {\n  const nameRef = useRef();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setName(nameRef.current.value);\n    generateNewID();\n  };\n\n  const generateNewID = () => {\n    const newID = uuidv4();\n    setId(newID);\n  };\n  return (\n    <Container\n      className='d-flex flex-column justify-content-center'\n      style={{ height: \"100vh\" }}\n    >\n      <Accordion>\n        <Card>\n          <Card.Header className=\"text-center\"> \n            <Accordion.Toggle as={Button} variant='link' eventKey='0'>\n              READ ME!\n            </Accordion.Toggle>\n          </Card.Header>\n          <Accordion.Collapse eventKey='0'>\n            <Card.Body>\n              Hello! This is a WhatsApp clone built by Zeyu Liu using SocketIO\n              and React Hooks. Enter your name and press start or create a random ID.\n              Add a contact by their ID and can start a conversation with one or multiple contacts.\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n      <Form onSubmit={handleSubmit} className='w-100'>\n        <Form.Group>\n          <Form.Label>Enter Your Name</Form.Label>\n          <Form.Control type='text' ref={nameRef} required />\n        </Form.Group>\n        <Button type='submit' className='mr-2'>\n          Start\n        </Button>\n        <Button variant='secondary' onClick={generateNewID}>\n          Create Random ID\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n","import { useState, useEffect } from \"react\";\nconst PREFIX = \"whatsapp-clone-\";\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n    if (jsonValue != null) return JSON.parse(jsonValue);\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n}\n","import React, { useContext } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nconst ContactsContext = React.createContext();\n\nexport const useContacts = () => {\n  return useContext(ContactsContext);\n};\n\nexport const ContactsProvider = ({ children }) => {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n  const createContact = (id, name) => {\n    setContacts(prevContacts => {\n      return [...prevContacts, { id, name }];\n    });\n  };\n  return (\n    <ContactsContext.Provider value={{ contacts, createContact }}>\n      {children}\n    </ContactsContext.Provider>\n  );\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst SocketContext = React.createContext();\n\nexport const useSocket = () => {\n  return useContext(SocketContext);\n};\n\nexport const SocketProvider = ({ id, children }) => {\n  const [socket, setSocket] = useState();\n  console.log(process.env.REACT_APP_DEV_URL)\n  useEffect(() => {\n    const newSocket = io(\n      process.env.REACT_APP_DEV_URL,\n      {\n        query: { id },\n      }\n    );\n    setSocket(newSocket);\n\n    return () => newSocket.close();\n  }, [id]);\n\n  return (\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n  );\n};\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useSocket } from \"./SocketProvider\";\nconst ConversationContext = React.createContext();\n\nexport const useConversation = () => {\n  return useContext(ConversationContext);\n};\n\nexport const ConversationsProvider = ({ children, id }) => {\n  const { contacts } = useContacts();\n  const [conversations, setConversations] = useLocalStorage(\"coversations\", []);\n  const [selectedConvoIndex, setSelectedConvoIndex] = useState(0);\n  const socket = useSocket();\n\n  const createConversation = (ids) => {\n    setConversations((prevConversations) => {\n      let existingConvoIndex = null;\n      const existingConvo = prevConversations.some((convo, index) => {\n        if (isArrayEqual(convo.ids, ids)) {\n          existingConvoIndex = index;\n          return true;\n        } else {\n          return false;\n        }\n      });\n      if (existingConvo) {\n        setSelectedConvoIndex(existingConvoIndex);\n        return [...prevConversations];\n      }\n      return [...prevConversations, { ids, messages: [] }];\n    });\n  };\n\n  const formattedConversations = conversations.map((convo, index) => {\n    const chatMembers = convo.ids.map((id) => {\n      const person = contacts.find((contact) => {\n        return contact.id === id;\n      });\n      const name = (person && person.name) || id;\n      return { id, name };\n    });\n    const messages = convo.messages.map((message) => {\n      const person = contacts.find((contact) => {\n        return contact.id === message.sender;\n      });\n      const name = (person && person.name) || message.sender;\n      const fromMe = message.sender === id;\n      return { ...message, senderName: name, fromMe };\n    });\n    const selected = index === selectedConvoIndex;\n    return { ...convo, messages, chatMembers, selected };\n  });\n\n  const addMessageToConversation = useCallback(\n    ({ ids, text, sender }) => {\n      let newMessage = {\n        sender,\n        text,\n      };\n      setConversations((prevConvos) => {\n        let madeChange = false;\n        const newConversations = prevConvos.map((convo) => {\n          if (isArrayEqual(convo.ids, ids)) {\n            madeChange = true;\n            return { ...convo, messages: [...convo.messages, newMessage] };\n          }\n          return convo;\n        });\n        if (madeChange) {\n          return newConversations;\n        } else {\n          return [...prevConvos, { ids, messages: [newMessage] }];\n        }\n      });\n    },\n    [setConversations]\n  );\n\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\"receive-message\", addMessageToConversation);\n    return () => socket.off(\"receive-message\");\n  }, [socket, addMessageToConversation]);\n\n  const sendMessage = (text) => {\n    const currentConversation = formattedConversations[selectedConvoIndex];\n    const ids = currentConversation.chatMembers.map(\n      (member) => member.id\n    );\n    socket.emit(\"send-message\", { ids, text, sender: id });\n    addMessageToConversation({\n      ids,\n      text,\n      sender: id,\n    });\n  };\n  return (\n    <ConversationContext.Provider\n      value={{\n        conversations: formattedConversations,\n        createConversation,\n        selectConversationIndex: setSelectedConvoIndex,\n        selectedConversation: formattedConversations[selectedConvoIndex],\n        sendMessage,\n      }}\n    >\n      {children}\n    </ConversationContext.Provider>\n  );\n};\n\nconst isArrayEqual = (array1, array2) => {\n  if (array1.length !== array2.length) return false;\n  array2.sort();\n  array1.sort();\n  return array1.every((element, index) => element === array2[index]);\n};\n","import React, { useCallback } from \"react\";\n\nfunction Message({ message, isLastMessage }) {\n  const setRef = useCallback((node) => {\n    if (node) {\n      node.scrollIntoView({ smooth: true });\n    }\n  }, []);\n  return (\n    <div\n      className={`my-1 d-flex flex-column ${\n        message.fromMe ? \"align-self-end\" : \"\"\n      }`}\n      ref={isLastMessage ? setRef : null}\n    >\n      <div\n        className={`rounded px-2 py-1 ${\n          message.fromMe ? \"bg-primary text-white\" : \"border\"\n        }`}\n      >\n        {message.text}\n      </div>\n      <div className={`text-muted small ${message.fromMe ? \"text-right\" : \"\"}`}>\n        {message.fromMe ? \"You\" : message.sender}\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import React from \"react\";\nimport Message from \"./Message\";\n\nfunction MessageList({ selectedConversation }) {\n  return (\n    <>\n      <div className='d-flex flex-column align-items-start justify-content-end px-3'>\n        {selectedConversation.messages.map((message, index) => {\n          const isLastMessage =\n            selectedConversation.messages.length - 1 === index;\n          return (\n            <Message\n              isLastMessage={isLastMessage}\n              key={index}\n              message={message}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default MessageList;\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { useSocket } from \"./SocketProvider\";\nimport Peer from 'simple-peer'\nconst VideoContext = React.createContext();\n\nexport const useVideo = () => {\n  return useContext(VideoContext);\n};\n\nexport const VideoProvider = ({ id, children }) => {\n\n  const userVideo = useRef()\n  const partnerVideo = useRef()\n  const [stream, setStream] = useState(null)\n  const [callAccepted, setCallAccepted] = useState(false)\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [callerSignal, setCallerSignal] = useState();\n\n  const [caller, setCaller] = useState(\"\");\n  const socket = useSocket()\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n      setStream(stream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream\n      }\n    })\n\n    socket.on(\"hey\", (data) => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    })\n    const copy = userVideo.current\n    console.log('copy', copy)\n    return () => {\n      console.log('running clean up')\n      navigator.mediaDevices.getUserMedia({ video: true, audio: false })\n        .then(mediaStream => {\n          const stream = mediaStream;\n          const tracks = stream.getTracks();\n          tracks.forEach((track) => {\n            track.stop()\n          })\n          console.log(tracks)\n          if (copy) {\n            copy.srcObject = null\n            setStream(null)\n\n          }\n        })\n    }\n  }, [socket])\n\n  const callOtherUsersInChat = (ids) => {\n    console.log('yoooooooo', ids)\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    })\n\n    peer.on(\"signal\", data => {\n      socket.emit('callUser', {\n        usersToCall: ids,\n        signalData: data,\n        from: id\n      })\n    })\n\n    peer.on('stream', stream => {\n      if (partnerVideo.current) {\n        console.log(partnerVideo.current)\n        partnerVideo.current.srcObject = stream;\n      }\n    })\n\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true)\n      peer.signal(signal)\n    })\n  }\n\n  const acceptCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    })\n\n    peer.on(\"signal\", data => {\n      socket.emit(\"acceptCall\", { signal: data, to: caller })\n    })\n\n    peer.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream\n    })\n\n    peer.signal(callerSignal)\n  }\n\n  const endCall = () => {\n    console.log('ending Call')\n    setCallAccepted(false)\n    setReceivingCall(false)\n    setCallerSignal(null)\n    const userStream = userVideo.current.srcObject\n    const tracks = userStream.getTracks();\n    tracks.forEach((track) => {\n      track.stop();\n    });\n    partnerVideo.current.srcObject = null\n    userVideo.current.srcObject = null\n\n  }\n\n\n  return (\n    <VideoContext.Provider value={{\n      stream,\n      userVideo,\n      partnerVideo,\n      callOtherUsersInChat,\n      receivingCall,\n      caller,\n      callAccepted,\n      acceptCall,\n      endCall\n    }}> { children}</VideoContext.Provider >\n  );\n};\n","import React from \"react\";\nimport { Alert, Badge, Button } from \"react-bootstrap\";\nimport { useVideo } from '../contexts/VideoProvider'\n\nfunction UserInfo({ selectedConversation, setVideoStart, videoStart }) {\n\n\n  const handleStartVideo = () => {\n    setVideoStart(!videoStart)\n  }\n  return (\n    <div>\n      <Alert className='px-3 m-2 d-flex align-items-center' variant='primary'>\n        Chat Member:{\" \"}\n        {selectedConversation.chatMembers.map((member) => {\n          return <Badge>{member.name}</Badge>;\n        })}\n        <Button style={{\n          marginLeft: 'auto'\n        }} onClick={handleStartVideo} variant='primary'>\n          {videoStart ? \"End Video\" : \"Enter Video Room\"}\n        </Button>\n      </Alert>\n    </div>\n  );\n}\n\nexport default UserInfo;\n","import React from 'react'\nimport { Button } from \"react-bootstrap\";\nimport { useVideo } from '../contexts/VideoProvider'\n\nfunction Video({ selectedConversation }) {\n  const { userVideo, callOtherUsersInChat, receivingCall, caller, acceptCall, callAccepted, partnerVideo, endCall } = useVideo()\n\n  return (\n    <div className=\"d-flex flex-column align-items-center m-5\">\n      <div className=\"d-flex flex-column \">\n        {!callAccepted && <Button className=\"m-2 p-2\" onClick={() => callOtherUsersInChat(selectedConversation.chatMembers)} >Call users in Chat</Button>}\n        {receivingCall && !callAccepted && <Button className=\"m-2 p-2\" onClick={acceptCall}>Accept Call from {caller}</Button>}\n        {callAccepted && <Button className=\"m-2 p-2\" onClick={endCall}>End Call</Button>}\n      </div>\n      <div className=\"d-flex flex-column \">\n        <video ref={userVideo} playsInline muted autoPlay width=\"500px\" height=\"500px\" />\n        {callAccepted && <video ref={partnerVideo} playsInline muted autoPlay width=\"500px\" height=\"500px\" />}\n      </div>\n    </div>\n  )\n}\n\nexport default Video\n","import React, { useState } from \"react\";\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\nimport { useConversation } from \"../contexts/ConversationsProvider\";\nimport MessageList from \"./MessageList\";\nimport UserInfo from \"./UserInfo\";\nimport Video from \"./Video\";\nimport { VideoProvider } from \"../contexts/VideoProvider\";\n\n\nfunction Chat({ id }) {\n  const [text, setText] = useState(\"\");\n  const { sendMessage, selectedConversation } = useConversation();\n  const [videoStart, setVideoStart] = useState(false);\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    sendMessage(text);\n    setText(\"\");\n  };\n\n  return (\n    <div className='d-flex flex-column flex-grow-1'>\n      <UserInfo selectedConversation={selectedConversation} setVideoStart={setVideoStart} videoStart={videoStart} />\n      {videoStart ? (\n        <VideoProvider id={id} >\n          <Video selectedConversation={selectedConversation} />\n        </VideoProvider>\n      ) : (\n          <>\n            <div className='flex-grow-1 overflow-auto'>\n              <MessageList selectedConversation={selectedConversation} />\n            </div>\n            <Form>\n              <Form.Group className='m-2'>\n                <InputGroup>\n                  <Form.Control\n                    as='textarea'\n                    required\n                    value={text}\n                    onChange={(e) => setText(e.target.value)}\n                    style={{ height: \"100px\", resize: \"none\" }}\n                  />\n                  <InputGroup.Append>\n                    <Button onClick={handleSubmit} type='submit'>\n                      Send\n                  </Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n            </Form>\n          </>\n        )}\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useConversation } from \"../contexts/ConversationsProvider\";\n\nfunction Conversations() {\n  const { conversations, selectConversationIndex } = useConversation();\n  const displayNames = (array) => {\n    const names = array.map((member) => member.name);\n    return names.join(\", \");\n  };\n\n \n  return (\n    <ListGroup varaiant='flush'>\n      {conversations.map((convo, index) => {\n        return (\n          <ListGroup.Item\n            key={index}\n            action\n            active={convo.selected}\n            onClick={() => selectConversationIndex(index)}\n          >\n            {displayNames(convo.chatMembers)}\n          </ListGroup.Item>\n        );\n      })}\n    </ListGroup>\n  );\n}\n\nexport default Conversations;\n","import React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\nimport { useConversation } from \"../contexts/ConversationsProvider\";\n\nfunction ConversationsModal({ closeModal }) {\n  const { contacts } = useContacts();\n  const { createConversation } = useConversation();\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n\n  const handleCheckBox = id => {\n    setSelectedContactIds(prevContacts => {\n      if (prevContacts.includes(id)) {\n        return prevContacts.filter(prevId => prevId.id !== id);\n      } else {\n        return [...prevContacts, id];\n      }\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createConversation(selectedContactIds);\n    closeModal();\n  };\n\n  return (\n    <>\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map(contact => {\n            return (\n              <Form.Group controlId={contact.id} key={contact.id}>\n                <Form.Check\n                  type='checkbox'\n                  value={selectedContactIds.includes(contact.id)}\n                  label={contact.name}\n                  onChange={() => {\n                    handleCheckBox(contact.id);\n                  }}\n                />\n              </Form.Group>\n            );\n          })}\n          <Button type='submit'>Create Conversation</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n\nexport default ConversationsModal;\n","import React, { useRef } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\n\nfunction ContactsModal({ closeModal }) {\n  const idRef = useRef();\n  const nameRef = useRef();\n  const { createContact } = useContacts()\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    createContact(idRef.current.value, nameRef.current.value);\n    closeModal();\n  };\n  return (\n    <>\n      <Modal.Header closeButton>Create Contact</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>ID</Form.Label>\n            <Form.Control type='text' ref={idRef} required />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control type='text' ref={nameRef} required />\n          </Form.Group>\n          <Button type='submit'>Create Contact</Button>\n        </Form>\n      </Modal.Body>\n    </>\n  );\n}\n\nexport default ContactsModal;\n","import React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useContacts } from \"../contexts/ContactsProvider\";\n\nconst Contacts = () => {\n  const { contacts } = useContacts();\n  return (\n    <ListGroup varaiant='flush'>\n      {contacts.map(contact => {\n        return <ListGroup.Item key={contact.id}>{contact.name}</ListGroup.Item>;\n      })}\n    </ListGroup>\n  );\n};\n\nexport default Contacts;\n","import React, { useState } from \"react\";\nimport { Tab, Nav, Button, Modal } from \"react-bootstrap\";\nimport Conversations from \"./Conversations\";\nimport ConversationsModal from \"./ConversationsModal.js\";\nimport ContactsModal from \"./ContactsModal\";\nimport Contacts from \"./Contacts\";\nconst CONTACTS_KEY = \"contacts\";\nconst CONVERSATIONS_KEY = \"conversations\";\n\nfunction Sidebar({ id }) {\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\n  const [showModal, setShowModal] = useState(false);\n\n  const conversationOpen = activeKey === CONVERSATIONS_KEY;\n  const closeModal = () => {\n    setShowModal(false);\n  };\n  return (\n    <div style={{ width: \"250px\" }} className='d-flex flex-column'>\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\n        <Nav variant='tabs' className='justify-content-center'>\n          <Nav.Item>\n            <Nav.Link eventKey={CONVERSATIONS_KEY}> Conversations</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Tab.Content className='border-right overflow-auto flex-grow-1'>\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\n            <Conversations />\n          </Tab.Pane>\n          <Tab.Pane eventKey={CONTACTS_KEY}>\n            <Contacts />\n          </Tab.Pane>\n        </Tab.Content>\n        <div className='p-2 border-top border-right small'>\n          Your ID <span className='text-muted'> {id}</span>\n        </div>\n        <Button className='rounded-0' onClick={() => setShowModal(true)}>\n          NEW {conversationOpen ? \"CONVERSATION\" : \"CONTACTS\"}\n        </Button>\n      </Tab.Container>\n\n      <Modal show={showModal} onHide={closeModal}>\n        {conversationOpen ? (\n          <ConversationsModal closeModal={closeModal} />\n        ) : (\n          <ContactsModal closeModal={closeModal} />\n        )}\n      </Modal>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport { useConversation } from \"../contexts/ConversationsProvider\";\nimport Chat from \"./Chat\";\nimport Sidebar from \"./Sidebar\";\n\nfunction Dashboard({ id }) {\n  const { selectedConversation } = useConversation();\n  return (\n    <div className='d-flex' style={{ height: \"100vh\" }}>\n      <Sidebar id={id} />\n      {selectedConversation && <Chat id={id} />}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport Login from \"./Login\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Dashboard from \"./Dashboard\";\nimport { ContactsProvider } from \"../contexts/ContactsProvider\";\nimport { ConversationsProvider } from \"../contexts/ConversationsProvider\";\nimport { SocketProvider } from \"../contexts/SocketProvider\";\nimport { VideoProvider } from \"../contexts/VideoProvider\";\n\nfunction App() {\n  const [id, setId] = useLocalStorage(\"id\", null);\n  const [name, setName] = useLocalStorage(\"name\", null);\n  const dashBoard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n  return id ? dashBoard : <Login setId={setId} setName={setName} />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}